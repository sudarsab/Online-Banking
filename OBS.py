{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "fc9fc49a-0ded-4965-8e5a-579a87302a4e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1. Create account\n",
      "2. Login\n",
      "3. Deposit\n",
      "4. Withdraw\n",
      "5. Get balance\n",
      "6. Exit\n"
     ]
    }
   ],
   "source": [
    "import sqlite3\n",
    "import logging\n",
    "import hashlib\n",
    "import getpass\n",
    "from sqlite3 import OperationalError\n",
    "\n",
    "# Set up logging\n",
    "logging.basicConfig(filename='banking_system.log', level=logging.INFO)\n",
    "\n",
    "#account section\n",
    "class BankAccount:\n",
    "    def __init__(self, account_number, customer_name, email, balance=0.0):\n",
    "        self.account_number = account_number\n",
    "        self.customer_name = customer_name\n",
    "        self.email = email\n",
    "        self.balance = balance\n",
    "\n",
    "    def deposit(self, amount):\n",
    "        self.balance += amount\n",
    "        logging.info(f\"Deposit of {amount} made to account {self.account_number}\")\n",
    "\n",
    "    def withdraw(self, amount):\n",
    "        if amount > self.balance:\n",
    "            raise ValueError(\"Insufficient balance\")\n",
    "        self.balance -= amount\n",
    "        logging.info(f\"Withdrawal of {amount} made from account {self.account_number}\")\n",
    "\n",
    "    def get_balance(self):\n",
    "        return self.balance\n",
    "\n",
    "\n",
    "# It Is a database section  connected to sqlite3\n",
    "class Bank:   \n",
    "    def __init__(self, db_name):\n",
    "        self.conn = sqlite3.connect(db_name)\n",
    "        self.cursor = self.conn.cursor()\n",
    "        try:\n",
    "            self.cursor.execute(\"\"\"\n",
    "                CREATE TABLE IF NOT EXISTS accounts (\n",
    "                    account_number INTEGER PRIMARY KEY,\n",
    "                    customer_name TEXT,\n",
    "                    email TEXT,\n",
    "                    balance REAL\n",
    "                );\n",
    "            \"\"\")\n",
    "            self.cursor.execute(\"\"\"\n",
    "                CREATE TABLE IF NOT EXISTS users (\n",
    "                    username TEXT PRIMARY KEY,\n",
    "                    password TEXT\n",
    "                );\n",
    "            \"\"\")\n",
    "            self.conn.commit()\n",
    "        except OperationalError:\n",
    "            import time\n",
    "            time.sleep(1)\n",
    "            self.conn.commit()\n",
    "\n",
    "    def add_account(self, account_number, customer_name, email, balance=0.0):\n",
    "        self.cursor.execute(\"INSERT INTO accounts (account_number, customer_name, email, balance) VALUES (?,?,?,?)\",\n",
    "                        (account_number, customer_name, email, balance))\n",
    "        try:\n",
    "            self.conn.commit()\n",
    "        except OperationalError:\n",
    "            import time\n",
    "            time.sleep(1)\n",
    "            self.conn.commit()\n",
    "\n",
    "    def get_account(self, account_number):\n",
    "        self.cursor.execute(\"SELECT * FROM accounts WHERE account_number =?\",\n",
    "                            (account_number,))\n",
    "        row = self.cursor.fetchone()\n",
    "        if row:\n",
    "            return BankAccount(*row)\n",
    "        else:\n",
    "            return None\n",
    "\n",
    "    def add_user(self, username, password):\n",
    "        hashed_password = hashlib.sha256(password.encode()).hexdigest()\n",
    "        self.cursor.execute(\"INSERT INTO users (username, password) VALUES (?,?)\",\n",
    "                        (username, hashed_password))\n",
    "        self.conn.commit()\n",
    "\n",
    "    def authenticate_user(self, username, password):\n",
    "        hashed_password = hashlib.sha256(password.encode()).hexdigest()\n",
    "        self.cursor.execute(\"SELECT * FROM users WHERE username =? AND password =?\",\n",
    "                            (username, hashed_password))\n",
    "        row = self.cursor.fetchone()\n",
    "        if row:\n",
    "            return True\n",
    "        else:\n",
    "            return False\n",
    "\n",
    "    def close(self):\n",
    "        self.conn.close()\n",
    "\n",
    "#create account for new users\n",
    "\n",
    "def create_account(bank):  \n",
    "    customer_name = input(\"Enter customer name: \")\n",
    "    email = input(\"Enter email: \")\n",
    "    username = input(\"Enter username: \")\n",
    "    password = getpass.getpass(\"Enter password: \")\n",
    "    confirm_password = getpass.getpass(\"Re-enter password: \")\n",
    "    if password!= confirm_password:\n",
    "        logging.error(\"Passwords do not match\")\n",
    "        print(\"Passwords do not match. Please try again.\")\n",
    "        return\n",
    "    account_number = int(input(\"Enter account number: \"))\n",
    "    balance = float(input(\"Enter initial balance: \"))\n",
    "    bank.add_account(account_number, customer_name, email, balance)\n",
    "    bank.add_user(username, password)\n",
    "    logging.info(f\"Account created for {customer_name} with account number {account_number}\")\n",
    "    print(\"Account created successfully!\")\n",
    "\n",
    "#Banking working system\n",
    "\n",
    "class BankingSystem:\n",
    "    def __init__(self, db_name):\n",
    "        self.bank = Bank(db_name)\n",
    " \n",
    "    def login(self):  #login authentication verification\n",
    "        username = input(\"Enter username: \")\n",
    "        password = getpass.getpass(\"Enter password: \")\n",
    "        if self.bank.authenticate_user(username, password):\n",
    "            logging.info(f\"User {username} logged in successfully\")\n",
    "            return True\n",
    "        else:\n",
    "            logging.warning(f\"Invalid username or password for user {username}\")\n",
    "            return False\n",
    "\n",
    "    def deposit(self):  #according to enter the balance it add money to previous amount and update in database\n",
    "        account_number = int(input(\"Enter account number: \"))\n",
    "        amount = float(input(\"Enter amount to deposit: \"))\n",
    "        account = self.bank.get_account(account_number)\n",
    "        if account:\n",
    "            account.deposit(amount)\n",
    "            self.bank.cursor.execute(\"UPDATE accounts SET balance = ? WHERE account_number = ?\", (account.balance, account_number))\n",
    "            self.bank.conn.commit()\n",
    "        else:\n",
    "            logging.error(f\"Account {account_number} not found\")\n",
    "\n",
    "    def withdraw(self):  #withdraw section update the withdraw details in database.\n",
    "        account_number = int(input(\"Enter account number: \"))\n",
    "        amount = float(input(\"Enter amount to withdraw: \"))\n",
    "        account = self.bank.get_account(account_number)\n",
    "        if account:\n",
    "            if account.get_balance() < amount:\n",
    "                print(\"Insufficient balance\")\n",
    "                return\n",
    "            account.withdraw(amount)\n",
    "            self.bank.cursor.execute(\"UPDATE accounts SET balance = ? WHERE account_number = ?\", (account.balance, account_number))\n",
    "            self.bank.conn.commit()\n",
    "        else:\n",
    "            logging.error(f\"Account {account_number} not found\")\n",
    "\n",
    "    def get_balance(self):  #Display the current balance in account\n",
    "        account_number = int(input(\"Enter account number: \"))\n",
    "        account = self.bank.get_account(account_number)\n",
    "        if account:\n",
    "            print(f\"Balance: {account.get_balance()}\")\n",
    "        else:\n",
    "            logging.error(f\"Account {account_number} not found\")\n",
    "\n",
    "    def run(self):\n",
    "        while True:\n",
    "            print(\"1. Create account\")\n",
    "            print(\"2. Login\")\n",
    "            print(\"3. Deposit\")\n",
    "            print(\"4. Withdraw\")\n",
    "            print(\"5. Get balance\")\n",
    "            print(\"6. Exit\")\n",
    "            choice = input(\"Enter your choice: \")\n",
    "            if choice == \"1\":\n",
    "                create_account(self.bank)\n",
    "            elif choice == \"2\":\n",
    "                if self.login():\n",
    "                    while True:\n",
    "                        print(\"1. Deposit\")\n",
    "                        print(\"2. Withdraw\")\n",
    "                        print(\"3. Get balance\")\n",
    "                        print(\"4. Logout\")\n",
    "                        choice = input(\"Enter your choice: \")\n",
    "                        if choice == \"1\":\n",
    "                            self.deposit()\n",
    "                        elif choice == \"2\":\n",
    "                            self.withdraw()\n",
    "                        elif choice == \"3\":\n",
    "                            self.get_balance()\n",
    "                        elif choice == \"4\":\n",
    "                            break\n",
    "                        else:\n",
    "                            print(\"Invalid choice\")\n",
    "            elif choice == \"3\":\n",
    "                self.deposit()\n",
    "            elif choice == \"4\":\n",
    "                self.withdraw()\n",
    "            elif choice == \"5\":\n",
    "                self.get_balance()\n",
    "            elif choice == \"6\":\n",
    "                break\n",
    "            else:\n",
    "                print(\"Invalid choice\")\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    db_name = \"banking_system.db\"\n",
    "    banking_system = BankingSystem(db_name)\n",
    "    banking_system.run()\n",
    "    banking_system.bank.close()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "60558ba5-00b6-4246-acd9-c21929716555",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
